/**
* Copyright 2021 Comcast Cable Communications Management, LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* SPDX-License-Identifier: Apache-2.0
*/
package cassandra

import (
	"regexp"

	"github.com/gocql/gocql"
)

const (
	CreateKeyspaceStatement = `CREATE KEYSPACE IF NOT EXISTS %s WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}`
	regexPattern            = `^CREATE TABLE IF NOT EXISTS (?P<tablename>\w+) \(`
)

var (
	AllTables             = []string{}
	createTableStatements = []string{
		`CREATE TABLE IF NOT EXISTS bridge_mode_config (
    cpe_mac text PRIMARY KEY,
    bridge_mode_enabled boolean
)`,
		`CREATE TABLE IF NOT EXISTS captive_portal_config (
    cpe_mac text PRIMARY KEY,
    captive_portal_enabled boolean
)`,
		`CREATE TABLE IF NOT EXISTS firewall_config (
    cpe_mac text PRIMARY KEY,
    block_http_enabled boolean,
    block_icmp_enabled boolean,
    block_ident_enabled boolean,
    block_multicast_enabled boolean,
    block_p2p_enabled boolean,
    firewall_level int
)`,
		`CREATE TABLE IF NOT EXISTS gre_tunnel_config (
    cpe_mac text PRIMARY KEY,
    gre_dscp int,
    tunnel_activation_status boolean,
    tunnel_interface1_interfaces text,
    tunnel_interface1_vlan bigint,
    tunnel_interface2_interfaces text,
    tunnel_interface2_vlan bigint,
    tunnel_interface3_interfaces text,
    tunnel_interface3_vlan bigint,
    tunnel_interface4_interfaces text,
    tunnel_interface4_vlan bigint,
    tunnel_primary_endpoint text,
    tunnel_secondary_endpoint text
)`,
		`CREATE TABLE IF NOT EXISTS hcpe_lan_config (
    cpe_mac text PRIMARY KEY,
    dhcp_end_ip_address text,
    dhcp_lease_length bigint,
    dhcp_server_enabled boolean,
    dhcp_start_ip_address text,
    dhcpv6_end_ip_address text,
    dhcpv6_lease_length bigint,
    dhcpv6_start_ip_address text,
    ip_address text,
    ipv6_prefix text,
    mac_bindings text,
    netmask text,
    primary_dns_enabled boolean,
    primary_dns_ip_address text,
    primary_dns_mode text,
    primary_ipv6_dns_enabled boolean,
    primary_ipv6_dns_ip_address text,
    primary_ipv6_dns_mode text,
    secondary_dns_enabled boolean,
    secondary_dns_ip_address text,
    secondary_dns_mode text,
    secondary_ipv6_dns_enabled boolean,
    secondary_ipv6_dns_ip_address text,
    secondary_ipv6_dns_mode text
)`,
		`CREATE TABLE IF NOT EXISTS xpcconifg_table (
    cpe_mac text,
    table_id text,
    row_id uuid,
    params text,
    row_index int,
    PRIMARY KEY (cpe_mac, table_id, row_id)
)`,
		`CREATE TABLE IF NOT EXISTS radio_config (
    cpe_mac text,
    radio_index int,
    auto_channel_enabled boolean,
    beacon_interval int,
    channel int,
    channel_width int,
    dfs_enabled boolean,
    extension_channel text,
    fragmentation_threshold int,
    min_basic_rate int,
    operating_standards text,
    radio_enabled boolean,
    tx_power int,
    xpc_radio_frequency int,
    PRIMARY KEY (cpe_mac, radio_index)
)`,
		`CREATE TABLE IF NOT EXISTS radio_ssid_config (
    cpe_mac text,
    radio_index int,
    ssid_index int,
    broadcast_ssid boolean,
    radius_accounting_enabled boolean,
    radius_accounting_interval int,
    radius_acct_server_ip text,
    radius_acct_server_port int,
    radius_acct_server_secret text,
    radius_server_ip text,
    radius_server_port int,
    radius_server_secret text,
    ssid_enabled boolean,
    ssid_name text,
    wep_key text,
    wifi_passphrase text,
    wifi_security int,
    PRIMARY KEY ((cpe_mac, radio_index), ssid_index)
)`,
		`CREATE TABLE IF NOT EXISTS voip_config (
    cpe_mac text PRIMARY KEY,
    cloud_doc_version text,
    cpe_doc_version text,
    enabled boolean,
    region text,
    sip_authusername text,
    sip_authuserpassword text,
    sip_proxy_server text,
    sip_url text,
    updated_time timestamp,
    voice_config_state text
)`,
		`CREATE TABLE IF NOT EXISTS wan_config (
    cpe_mac text PRIMARY KEY,
    default_firewall_policy int,
    dmz_enabled boolean,
    dmz_host text,
    dns list<text>,
    filter_icmp_inbound boolean,
    gateway_ip text,
    port_range_enabled boolean,
    public_ip text,
    public_ipv6 text,
    vlan_id int
)`,
		`CREATE TABLE IF NOT EXISTS moca_config (
    cpe_mac text PRIMARY KEY,
    curr_oper_frequency      int,
    moca_interface_status    text,
    network_password         text,
    supported_frequencies    list<int>,
    bytes_sent               bigint,
    interface_name           text,
    moca_enabled             boolean,
    privacy_enabled          boolean,
    moca_mac_address         text,
    network_coordinator_id   int,
    preferred_nc_enabled     boolean,
    privacy_state_enabled    boolean,
    alias_name               text,
    channel_scanning_enabled boolean,
    firmware_version         text,
    beacon_power_limit       int,
    bytes_received           bigint,
    network_taboo_mask       list<int>
)`,
		`CREATE TABLE IF NOT EXISTS xpc_group_config (
    cpe_mac text,
    group_id text,
    error_code int,
    error_details text,
    params text,
    updated_time timestamp,
    version text,
    payload blob,
    state int,
    PRIMARY KEY (cpe_mac, group_id)
)`,
		`CREATE TABLE IF NOT EXISTS csxpc_group_config (
    xpc_csid uuid,
    group_id text,
    params text,
    updated_time timestamp,
    version text,
    PRIMARY KEY (xpc_csid, group_id)
)`,
		`CREATE TABLE IF NOT EXISTS csbridge_mode_config (
    xpc_csid uuid PRIMARY KEY,
    bridge_mode_enabled boolean
)`,
		`CREATE TABLE IF NOT EXISTS csfirewall_config (
    xpc_csid uuid PRIMARY KEY,
    block_http_enabled boolean,
    block_icmp_enabled boolean,
    block_ident_enabled boolean,
    block_multicast_enabled boolean,
    block_p2p_enabled boolean,
    firewall_level int
)`,
		`CREATE TABLE IF NOT EXISTS cshcpe_lan_config (
    xpc_csid uuid PRIMARY KEY,
    dhcp_end_ip_address text,
    dhcp_lease_length bigint,
    dhcp_server_enabled boolean,
    dhcp_start_ip_address text,
    ip_address text,
    ipv6_prefix text,
    mac_bindings text,
    netmask text,
    primary_dns_enabled boolean,
    primary_dns_ip_address text,
    primary_dns_mode text,
    secondary_dns_enabled boolean,
    secondary_dns_ip_address text,
    secondary_dns_mode text
)`,
		`CREATE TABLE IF NOT EXISTS csradio_config (
    xpc_csid uuid,
    radio_index int,
    auto_channel_enabled boolean,
    beacon_interval int,
    channel int,
    channel_width int,
    dfs_enabled boolean,
    extension_channel text,
    fragmentation_threshold int,
    min_basic_rate int,
    operating_standards text,
    radio_enabled boolean,
    tx_power int,
    xpc_radio_frequency int,
    PRIMARY KEY (xpc_csid, radio_index)
)`,
		`CREATE TABLE IF NOT EXISTS csradio_ssid_config (
    xpc_csid uuid,
    radio_index int,
    ssid_index int,
    broadcast_ssid boolean,
    radius_accounting_enabled boolean,
    radius_accounting_interval int,
    radius_acct_server_ip text,
    radius_acct_server_port int,
    radius_acct_server_secret text,
    radius_server_ip text,
    radius_server_port int,
    radius_server_secret text,
    ssid_enabled boolean,
    ssid_name text,
    wep_key text,
    wifi_passphrase text,
    wifi_security int,
    PRIMARY KEY ((xpc_csid, radio_index), ssid_index)
)`,
		`CREATE TABLE IF NOT EXISTS csvoip_config (
    xpc_csid uuid PRIMARY KEY,
    cloud_doc_version text,
    cpe_doc_version text,
    enabled boolean,
    region text,
    sip_authusername text,
    sip_authuserpassword text,
    sip_proxy_server text,
    sip_url text,
    updated_time timestamp,
    voice_config_state text
)`,
		`CREATE TABLE IF NOT EXISTS cswan_config (
    xpc_csid uuid PRIMARY KEY,
    default_firewall_policy int,
    dmz_enabled boolean,
    dmz_host text,
    dns list<text>,
    filter_icmp_inbound boolean,
    gateway_ip text,
    port_range_enabled boolean,
    public_ip text,
    vlan_id int
)`,
		`CREATE TABLE IF NOT EXISTS csmoca_config (
    xpc_csid uuid PRIMARY KEY,
    moca_enabled boolean
)`,
		`CREATE TABLE IF NOT EXISTS csxpcconifg_table (
    xpc_csid uuid,
    table_id text,
    row_id uuid,
    params text,
    row_index int,
    PRIMARY KEY ((xpc_csid, table_id), row_id)
)`,
		`CREATE TABLE IF NOT EXISTS gdpr_message (
    cpe_mac text PRIMARY KEY,
    confirm_url text,
    cujo_ok boolean,
    xdp_ok boolean,
    source_id text,
    has_notified_wpil boolean,
    message_type text,
    partner_id text,
    plume_ok boolean,
    service_account_id text,
    required_by int,
    upload_url text,
    configset_id text,
    sqs_msg_id text
)`,
		`CREATE TABLE IF NOT EXISTS cpe (
    cpe_mac text PRIMARY KEY,
    xpc_csid uuid
)`,
		`CREATE TABLE IF NOT EXISTS csid (
    xpc_csid uuid PRIMARY KEY,
    cpe_mac text
)`,
		`CREATE TABLE IF NOT EXISTS root_document (
    cpe_mac text PRIMARY KEY,
    bitmap bigint,
    schema_version text,
    version text
)`,
		`CREATE TABLE IF NOT EXISTS video_service_config (
    cpe_mac text PRIMARY KEY,
    video_service_enabled boolean
)`,
		`CREATE TABLE IF NOT EXISTS xfinity_wifi2g_secure_config (
    cpe_mac text PRIMARY KEY,
    wifi_ads_enable boolean,
    wifi_beacon_pwr_ctl int,
    wifi_bssid text,
    wifi_key_passphrase text,
    wifi_mode_enabled text,
    wifi_modes_supported text,
    wifi_name text,
    wifi_radius_ip_addr text,
    wifi_radius_key text,
    wifi_radius_port int,
    wifi_secondary_radius_ip_addr text,
    wifi_secondary_radius_key text,
    wifi_secondary_radius_port int,
    wifi_ssid text,
    wifi_ssid_enable boolean,
    wifi_status text,
    wifi_uapsd_enable boolean,
    wifi_wmm_enable boolean,
    wifi_wpa_algorithm text,
    wifi_wps_config_methods_enabled boolean,
    wifi_wps_configmethods_enabled text,
    wifi_wps_enable boolean,
    wmm_enabled boolean
)`,
		`CREATE TABLE IF NOT EXISTS xfinity_wifi5g_secure_config (
    cpe_mac text PRIMARY KEY,
    wifi_ads_enable boolean,
    wifi_beacon_pwr_ctl int,
    wifi_bssid text,
    wifi_key_passphrase text,
    wifi_mode_enabled text,
    wifi_modes_supported text,
    wifi_name text,
    wifi_radius_ip_addr text,
    wifi_radius_key text,
    wifi_radius_port int,
    wifi_secondary_radius_ip_addr text,
    wifi_secondary_radius_key text,
    wifi_secondary_radius_port int,
    wifi_ssid text,
    wifi_ssid_enable boolean,
    wifi_status text,
    wifi_uapsd_enable boolean,
    wifi_wmm_enable boolean,
    wifi_wpa_algorithm text,
    wifi_wps_config_methods_enabled boolean,
    wifi_wps_configmethods_enabled text,
    wifi_wps_enable boolean,
    wmm_enabled boolean
)`,
		`CREATE TABLE IF NOT EXISTS home_wifi_hotspot_config (
    cpe_mac text PRIMARY KEY,
    home_wifi_hotspot_capable_cpe boolean,
    home_wifi_hotspot_enabled boolean
)`,
		`CREATE TABLE IF NOT EXISTS xfinity_wifi_config (
    cpe_mac text PRIMARY KEY,
    wifi_ads_enable boolean,
    wifi_ads_enable_5g boolean,
    wifi_applysetting boolean,
    wifi_applysetting_5g boolean,
    wifi_beacon_pwr_ctl int,
    wifi_beacon_pwr_ctl_5g int,
    wifi_beacon_pwr_interval int,
    wifi_beacon_pwr_rate text,
    wifi_bssid text,
    wifi_bssid_5g text,
    wifi_enable boolean,
    wifi_enable_5g boolean,
    wifi_radius_ip_addr_5g text,
    wifi_radius_key text,
    wifi_radius_key_5g text,
    wifi_radius_port_5g int,
    wifi_secondary_radius_key text,
    wifi_secondary_radius_key_5g text,
    wifi_ssid text,
    wifi_ssid_5g text,
    wifi_status text,
    wifi_status_5g text,
    wmm_enabled_2g boolean,
    wmm_enabled_5g boolean
)`,
		`CREATE TABLE IF NOT EXISTS cpe_xdns_policy (
    cpe_mac text PRIMARY KEY,
    filter_level int,
    xdns_enabled boolean
)`,
		`CREATE TABLE IF NOT EXISTS device_xdns_content_filtering (
    cpe_mac text,
    device_mac text,
    filter_level int,
    PRIMARY KEY (cpe_mac, device_mac)
)`,
		`CREATE TABLE IF NOT EXISTS fingerprint_agent (
    cpe_mac text PRIMARY KEY,
    enabled boolean,
    name text,
    updated_datetime timestamp
)`,
		`CREATE TABLE IF NOT EXISTS cujo_security_agent (
    cpe_mac text PRIMARY KEY,
    enabled boolean,
    hard_limit_reached boolean,
    listen_mode boolean,
    state text,
    update_time timestamp
)`,

		`CREATE TABLE IF NOT EXISTS mesh_agent (
    cpe_mac text PRIMARY KEY,
    disconnected boolean,
    enabled boolean,
    mesh_account_id text,
    optimization_sns_sent_time timestamp,
    optimization_task_failed_time timestamp,
    optimization_time timestamp,
    pods text
)`,
		`CREATE TABLE IF NOT EXISTS device_content_family_mentor_config (
    cpe_mac text PRIMARY KEY,
    enabled boolean,
    updated_datetime timestamp
)`,
		`CREATE TABLE IF NOT EXISTS device_privacy_tracker (
    cpe_mac text PRIMARY KEY,
    enabled boolean,
    enabled_datetime timestamp,
    timezone text,
    updated_datetime timestamp
)`,
		`CREATE TABLE IF NOT EXISTS cpe_devices_summary (
    cpe_mac text,
    device_mac text,
    device_parent text,
    device_type int,
    interface_type_spec int,
    is_notification_attempted boolean,
    last_seen_hostname text,
    last_seen_ip text,
    last_seen_offline_timestamp timestamp,
    last_seen_online_timestamp timestamp,
    manufacturer text,
    status text,
    PRIMARY KEY (cpe_mac, device_mac)
)`,
		`CREATE TABLE IF NOT EXISTS firmware_subdoc_bitmap (
    version text PRIMARY KEY,
    bitmap bigint
)`,
		`CREATE TABLE IF NOT EXISTS interworking_passpoint_config (
    cpe_mac text PRIMARY KEY,
    interworking_accessnetwork_type int,
    interworking_apply_settings boolean,
    interworking_asra boolean,
    interworking_esr boolean,
    interworking_hessid text,
    interworking_hessoption_present boolean,
    interworking_internet boolean,
    interworking_service_enable boolean,
    interworking_service_parameters text,
    interworking_uesa boolean,
    interworking_venueinfo_group int,
    interworking_venueinfo_type int,
    passpoint_enable boolean,
    passpoint_parameters text,
    wifi_interworking_enable boolean,
    wifi_passpoint_enable boolean
)`,
		`CREATE TABLE IF NOT EXISTS wancos_config (
    cpe_mac text PRIMARY KEY,
    cos_data int,
    cos_voice_rtp int,
    cos_voice_sip int
)`,

		`CREATE TABLE IF NOT EXISTS xfinity_bss_max_num_sta (
    cpe_mac text PRIMARY KEY,
    bss_max_sta_10001 int,
    bss_max_sta_10002 int,
    bss_max_sta_10003 int,
    bss_max_sta_10004 int,
    bss_max_sta_10005 int,
    bss_max_sta_10006 int,
    bss_max_sta_10007 int,
    bss_max_sta_10008 int,
    bss_max_sta_10101 int,
    bss_max_sta_10102 int,
    bss_max_sta_10103 int,
    bss_max_sta_10104 int,
    bss_max_sta_10105 int,
    bss_max_sta_10106 int,
    bss_max_sta_10107 int,
    bss_max_sta_10108 int
)`,
	}

	// manually maintained by checking django models.py
	// could be out-of-date
	ManagedXdpSchemas = map[string]map[string]gocql.Type{
		"csxpc_group_config": {
			"group_id":     gocql.TypeText,
			"params":       gocql.TypeText,
			"updated_time": gocql.TypeTimestamp,
			"version":      gocql.TypeText,
			"xpc_csid":     gocql.TypeUUID,
		},
		"radio_config": {
			"channel_width":           gocql.TypeInt,
			"cpe_mac":                 gocql.TypeText,
			"fragmentation_threshold": gocql.TypeInt,
			"radio_index":             gocql.TypeInt,
			"auto_channel_enabled":    gocql.TypeBoolean,
			"min_basic_rate":          gocql.TypeInt,
			"tx_power":                gocql.TypeInt,
			"beacon_interval":         gocql.TypeInt,
			"channel":                 gocql.TypeInt,
			"dfs_enabled":             gocql.TypeBoolean,
			"radio_enabled":           gocql.TypeBoolean,
			"xpc_radio_frequency":     gocql.TypeInt,
			"extension_channel":       gocql.TypeText,
			"operating_standards":     gocql.TypeText,
		},
		"radio_ssid_config": {
			"cpe_mac":                    gocql.TypeText,
			"radio_index":                gocql.TypeInt,
			"ssid_index":                 gocql.TypeInt,
			"broadcast_ssid":             gocql.TypeBoolean,
			"radius_accounting_enabled":  gocql.TypeBoolean,
			"radius_accounting_interval": gocql.TypeInt,
			"radius_acct_server_ip":      gocql.TypeText,
			"radius_acct_server_port":    gocql.TypeInt,
			"radius_acct_server_secret":  gocql.TypeText,
			"radius_server_ip":           gocql.TypeText,
			"radius_server_port":         gocql.TypeInt,
			"radius_server_secret":       gocql.TypeText,
			"ssid_enabled":               gocql.TypeBoolean,
			"ssid_name":                  gocql.TypeText,
			"wep_key":                    gocql.TypeText,
			"wifi_passphrase":            gocql.TypeText,
			"wifi_security":              gocql.TypeInt,
		},
		"csmoca_config": {
			"xpc_csid":     gocql.TypeUUID,
			"moca_enabled": gocql.TypeBoolean,
		},
		"csradio_config": {
			"tx_power":                gocql.TypeInt,
			"channel":                 gocql.TypeInt,
			"operating_standards":     gocql.TypeText,
			"radio_index":             gocql.TypeInt,
			"auto_channel_enabled":    gocql.TypeBoolean,
			"dfs_enabled":             gocql.TypeBoolean,
			"fragmentation_threshold": gocql.TypeInt,
			"xpc_radio_frequency":     gocql.TypeInt,
			"beacon_interval":         gocql.TypeInt,
			"extension_channel":       gocql.TypeText,
			"min_basic_rate":          gocql.TypeInt,
			"radio_enabled":           gocql.TypeBoolean,
			"xpc_csid":                gocql.TypeUUID,
			"channel_width":           gocql.TypeInt,
		},
		"csradio_ssid_config": {
			"broadcast_ssid":             gocql.TypeBoolean,
			"ssid_enabled":               gocql.TypeBoolean,
			"ssid_name":                  gocql.TypeText,
			"wep_key":                    gocql.TypeText,
			"radio_index":                gocql.TypeInt,
			"radius_accounting_enabled":  gocql.TypeBoolean,
			"radius_accounting_interval": gocql.TypeInt,
			"radius_server_ip":           gocql.TypeText,
			"ssid_index":                 gocql.TypeInt,
			"wifi_passphrase":            gocql.TypeText,
			"wifi_security":              gocql.TypeInt,
			"xpc_csid":                   gocql.TypeUUID,
			"radius_server_port":         gocql.TypeInt,
			"radius_acct_server_ip":      gocql.TypeText,
			"radius_acct_server_port":    gocql.TypeInt,
			"radius_acct_server_secret":  gocql.TypeText,
			"radius_server_secret":       gocql.TypeText,
		},
		"csvoip_config": {
			"sip_url":              gocql.TypeText,
			"voice_config_state":   gocql.TypeText,
			"xpc_csid":             gocql.TypeUUID,
			"cpe_doc_version":      gocql.TypeText,
			"enabled":              gocql.TypeBoolean,
			"sip_authusername":     gocql.TypeText,
			"sip_authuserpassword": gocql.TypeText,
			"cloud_doc_version":    gocql.TypeText,
			"region":               gocql.TypeText,
			"sip_proxy_server":     gocql.TypeText,
			"updated_time":         gocql.TypeTimestamp,
		},
		"voip_config": {
			"cloud_doc_version":    gocql.TypeText,
			"cpe_doc_version":      gocql.TypeText,
			"sip_authusername":     gocql.TypeText,
			"sip_proxy_server":     gocql.TypeText,
			"sip_url":              gocql.TypeText,
			"updated_time":         gocql.TypeTimestamp,
			"voice_config_state":   gocql.TypeText,
			"cpe_mac":              gocql.TypeText,
			"enabled":              gocql.TypeBoolean,
			"region":               gocql.TypeText,
			"sip_authuserpassword": gocql.TypeText,
		},
		"wan_config": {
			"gateway_ip":              gocql.TypeText,
			"port_range_enabled":      gocql.TypeBoolean,
			"vlan_id":                 gocql.TypeInt,
			"dmz_enabled":             gocql.TypeBoolean,
			"dns":                     gocql.TypeList,
			"dmz_host":                gocql.TypeText,
			"filter_icmp_inbound":     gocql.TypeBoolean,
			"public_ip":               gocql.TypeText,
			"public_ipv6":             gocql.TypeText,
			"cpe_mac":                 gocql.TypeText,
			"default_firewall_policy": gocql.TypeInt,
		},
		"xpcconifg_table": {
			"row_index": gocql.TypeInt,
			"table_id":  gocql.TypeText,
			"cpe_mac":   gocql.TypeText,
			"params":    gocql.TypeText,
			"row_id":    gocql.TypeUUID,
		},
		"cshcpe_lan_config": {
			"ip_address":               gocql.TypeText,
			"primary_dns_mode":         gocql.TypeText,
			"secondary_dns_ip_address": gocql.TypeText,
			"ipv6_prefix":              gocql.TypeText,
			"netmask":                  gocql.TypeText,
			"primary_dns_ip_address":   gocql.TypeText,
			"secondary_dns_enabled":    gocql.TypeBoolean,
			"dhcp_end_ip_address":      gocql.TypeText,
			"dhcp_lease_length":        gocql.TypeBigInt,
			"dhcp_server_enabled":      gocql.TypeBoolean,
			"mac_bindings":             gocql.TypeText,
			"primary_dns_enabled":      gocql.TypeBoolean,
			"dhcp_start_ip_address":    gocql.TypeText,
			"secondary_dns_mode":       gocql.TypeText,
			"xpc_csid":                 gocql.TypeUUID,
		},
		"gre_tunnel_config": {
			"cpe_mac":                      gocql.TypeText,
			"gre_dscp":                     gocql.TypeInt,
			"tunnel_activation_status":     gocql.TypeBoolean,
			"tunnel_interface1_interfaces": gocql.TypeText,
			"tunnel_interface1_vlan":       gocql.TypeBigInt,
			"tunnel_interface2_interfaces": gocql.TypeText,
			"tunnel_interface2_vlan":       gocql.TypeBigInt,
			"tunnel_interface3_interfaces": gocql.TypeText,
			"tunnel_interface3_vlan":       gocql.TypeBigInt,
			"tunnel_interface4_interfaces": gocql.TypeText,
			"tunnel_interface4_vlan":       gocql.TypeBigInt,
			"tunnel_primary_endpoint":      gocql.TypeText,
			"tunnel_secondary_endpoint":    gocql.TypeText,
		},
		"hcpe_lan_config": {
			"cpe_mac":                       gocql.TypeText,
			"dhcp_end_ip_address":           gocql.TypeText,
			"dhcp_lease_length":             gocql.TypeBigInt,
			"dhcp_server_enabled":           gocql.TypeBoolean,
			"dhcp_start_ip_address":         gocql.TypeText,
			"dhcpv6_end_ip_address":         gocql.TypeText,
			"dhcpv6_lease_length":           gocql.TypeBigInt,
			"dhcpv6_start_ip_address":       gocql.TypeText,
			"ip_address":                    gocql.TypeText,
			"ipv6_prefix":                   gocql.TypeText,
			"mac_bindings":                  gocql.TypeText,
			"netmask":                       gocql.TypeText,
			"primary_dns_enabled":           gocql.TypeBoolean,
			"primary_dns_ip_address":        gocql.TypeText,
			"primary_dns_mode":              gocql.TypeText,
			"primary_ipv6_dns_enabled":      gocql.TypeBoolean,
			"primary_ipv6_dns_ip_address":   gocql.TypeText,
			"primary_ipv6_dns_mode":         gocql.TypeText,
			"secondary_dns_enabled":         gocql.TypeBoolean,
			"secondary_dns_ip_address":      gocql.TypeText,
			"secondary_dns_mode":            gocql.TypeText,
			"secondary_ipv6_dns_enabled":    gocql.TypeBoolean,
			"secondary_ipv6_dns_ip_address": gocql.TypeText,
			"secondary_ipv6_dns_mode":       gocql.TypeText,
		},
		"moca_config": {
			"alias_name":                              gocql.TypeText,
			"associated_device_numberof_entries":      gocql.TypeBigInt,
			"auto_power_control_enabled":              gocql.TypeBoolean,
			"auto_power_control_physical_rate":        gocql.TypeBigInt,
			"backup_nc":                               gocql.TypeBigInt,
			"beacon_power_limit":                      gocql.TypeInt,
			"best_network_coordinator_id":             gocql.TypeBigInt,
			"broadcast_packets_received":              gocql.TypeBigInt,
			"broadcast_packets_sent":                  gocql.TypeBigInt,
			"bytes_received":                          gocql.TypeBigInt,
			"bytes_sent":                              gocql.TypeBigInt,
			"channel_scan_mask":                       gocql.TypeText,
			"channel_scanning_enabled":                gocql.TypeBoolean,
			"curr_oper_frequency":                     gocql.TypeInt,
			"current_version":                         gocql.TypeText,
			"cycle_master":                            gocql.TypeBoolean,
			"discard_packets_received":                gocql.TypeBigInt,
			"discard_packets_sent":                    gocql.TypeBigInt,
			"egress_num_flows":                        gocql.TypeBigInt,
			"errors_received":                         gocql.TypeBigInt,
			"errors_sent":                             gocql.TypeBigInt,
			"ext_aggr_average_rx":                     gocql.TypeBigInt,
			"ext_aggr_average_tx":                     gocql.TypeBigInt,
			"ext_aggr_counter_table_first_rx":         gocql.TypeBigInt,
			"ext_aggr_counter_table_first_tx":         gocql.TypeBigInt,
			"ext_aggr_counter_table_numberof_entries": gocql.TypeBigInt,
			"ext_counter_table_numberof_entries":      gocql.TypeBigInt,
			"firmware_version":                        gocql.TypeText,
			"flownumberof_entries":                    gocql.TypeBigInt,
			"frequency_capability_mask":               gocql.TypeText,
			"frequency_current_mask":                  gocql.TypeText,
			"frequency_current_mask_setting":          gocql.TypeText,
			"highest_version":                         gocql.TypeText,
			"ingress_num_flow":                        gocql.TypeBigInt,
			"interface_name":                          gocql.TypeText,
			"irst_peer_speed":                         gocql.TypeBigInt,
			"last_change":                             gocql.TypeBigInt,
			"last_oper_frequency":                     gocql.TypeBigInt,
			"link_uptime":                             gocql.TypeBigInt,
			"lower_layers":                            gocql.TypeText,
			"max_bit_rate":                            gocql.TypeBigInt,
			"max_egress_bw":                           gocql.TypeBigInt,
			"max_ingress_bw":                          gocql.TypeBigInt,
			"max_nodes":                               gocql.TypeBoolean,
			"mesh_table_numberof_entries":             gocql.TypeBigInt,
			"mixed_mode":                              gocql.TypeBoolean,
			"moca_enabled":                            gocql.TypeBoolean,
			"moca_interface_status":                   gocql.TypeText,
			"moca_mac_address":                        gocql.TypeText,
			"multicast_packets_received":              gocql.TypeBigInt,
			"multicast_packets_sent":                  gocql.TypeBigInt,
			"network_coordinator_id":                  gocql.TypeInt,
			"network_coordinator_macaddress":          gocql.TypeText,
			"network_password":                        gocql.TypeText,
			"network_taboo_mask":                      gocql.TypeList,
			"node_id":                                 gocql.TypeBigInt,
			"node_taboo_mask":                         gocql.TypeText,
			"number_of_entries":                       gocql.TypeInt,
			"numberof_connected_clients":              gocql.TypeBigInt,
			"packet_aggregation_capability":           gocql.TypeBigInt,
			"packets_received":                        gocql.TypeBigInt,
			"packets_sent":                            gocql.TypeBigInt,
			"peer_table_numberof_entries":             gocql.TypeBigInt,
			"power_control_physical_target":           gocql.TypeBigInt,
			"preferred_nc_enabled":                    gocql.TypeBoolean,
			"privacy_enabled":                         gocql.TypeBoolean,
			"privacy_state_enabled":                   gocql.TypeBoolean,
			"qa_m256_capable":                         gocql.TypeBoolean,
			"qos_enabled":                             gocql.TypeBoolean,
			"reset":                                   gocql.TypeBoolean,
			"second_peer_speed":                       gocql.TypeBigInt,
			"stats_reset":                             gocql.TypeBoolean,
			"supported_frequencies":                   gocql.TypeList,
			"taboo_bit_enabled":                       gocql.TypeBoolean,
			"tx_broadcast_power_reduction":            gocql.TypeBigInt,
			"tx_broadcast_rate":                       gocql.TypeBigInt,
			"tx_power_limit":                          gocql.TypeInt,
			"unicast_packets_received":                gocql.TypeBigInt,
			"unicast_packets_sent":                    gocql.TypeBigInt,
			"unknown_protocol_packets_received":       gocql.TypeBigInt,
			"upstream boolean":                        gocql.TypeBoolean,
		},
		"csfirewall_config": {
			"xpc_csid":                gocql.TypeUUID,
			"block_http_enabled":      gocql.TypeBoolean,
			"block_icmp_enabled":      gocql.TypeBoolean,
			"block_ident_enabled":     gocql.TypeBoolean,
			"block_multicast_enabled": gocql.TypeBoolean,
			"block_p2p_enabled":       gocql.TypeBoolean,
			"firewall_level":          gocql.TypeInt,
		},
		"csxpcconifg_table": {
			"xpc_csid":  gocql.TypeUUID,
			"params":    gocql.TypeText,
			"row_id":    gocql.TypeUUID,
			"row_index": gocql.TypeInt,
			"table_id":  gocql.TypeText,
		},
		"firewall_config": {
			"firewall_level":          gocql.TypeInt,
			"block_http_enabled":      gocql.TypeBoolean,
			"block_icmp_enabled":      gocql.TypeBoolean,
			"block_ident_enabled":     gocql.TypeBoolean,
			"block_multicast_enabled": gocql.TypeBoolean,
			"block_p2p_enabled":       gocql.TypeBoolean,
			"cpe_mac":                 gocql.TypeText,
		},
		"gdpr_message": {
			"cpe_mac":            gocql.TypeText,
			"cujo_ok":            gocql.TypeBoolean,
			"has_notified_wpil":  gocql.TypeBoolean,
			"partner_id":         gocql.TypeText,
			"plume_ok":           gocql.TypeBoolean,
			"required_by":        gocql.TypeInt,
			"service_account_id": gocql.TypeText,
			"xdp_ok":             gocql.TypeBoolean,
			"configset_id":       gocql.TypeText,
			"confirm_url":        gocql.TypeText,
			"source_id":          gocql.TypeText,
			"message_type":       gocql.TypeText,
			"upload_url":         gocql.TypeText,
			"sqs_msg_id":         gocql.TypeText,
		},
		"bridge_mode_config": {
			"cpe_mac":             gocql.TypeText,
			"bridge_mode_enabled": gocql.TypeBoolean,
		},
		"captive_portal_config": {
			"captive_portal_enabled": gocql.TypeBoolean,
			"cpe_mac":                gocql.TypeText,
		},
		"cpe": {
			"cpe_mac":  gocql.TypeText,
			"xpc_csid": gocql.TypeUUID,
			"partner":  gocql.TypeText,
		},
		"csbridge_mode_config": {
			"bridge_mode_enabled": gocql.TypeBoolean,
			"xpc_csid":            gocql.TypeUUID,
		},
		"csid": {
			"cpe_mac":  gocql.TypeText,
			"xpc_csid": gocql.TypeUUID,
		},
		"cswan_config": {
			"gateway_ip":              gocql.TypeText,
			"port_range_enabled":      gocql.TypeBoolean,
			"public_ip":               gocql.TypeText,
			"vlan_id":                 gocql.TypeInt,
			"xpc_csid":                gocql.TypeUUID,
			"filter_icmp_inbound":     gocql.TypeBoolean,
			"dmz_enabled":             gocql.TypeBoolean,
			"dmz_host":                gocql.TypeText,
			"dns":                     gocql.TypeList,
			"default_firewall_policy": gocql.TypeInt,
		},
		"xpc_group_config": {
			"group_id":      gocql.TypeText,
			"params":        gocql.TypeText,
			"payload":       gocql.TypeBlob,
			"updated_time":  gocql.TypeTimestamp,
			"version":       gocql.TypeText,
			"cpe_mac":       gocql.TypeText,
			"state":         gocql.TypeInt,
			"error_code":    gocql.TypeInt,
			"error_details": gocql.TypeText,
		},
		"root_document": {
			"cpe_mac":        gocql.TypeText,
			"version":        gocql.TypeText,
			"bitmap":         gocql.TypeBigInt,
			"schema_version": gocql.TypeText,
		},
		"video_service_config": {
			"cpe_mac":               gocql.TypeText,
			"video_service_enabled": gocql.TypeBoolean,
		},
		"xfinity_wifi2g_secure_config": {
			"cpe_mac":                         gocql.TypeText,
			"wifi_ads_enable":                 gocql.TypeBoolean,
			"wifi_beacon_pwr_ctl":             gocql.TypeInt,
			"wifi_bssid":                      gocql.TypeText,
			"wifi_key_passphrase":             gocql.TypeText,
			"wifi_mode_enabled":               gocql.TypeText,
			"wifi_modes_supported":            gocql.TypeText,
			"wifi_name":                       gocql.TypeText,
			"wifi_radius_ip_addr":             gocql.TypeText,
			"wifi_radius_key":                 gocql.TypeText,
			"wifi_radius_port":                gocql.TypeInt,
			"wifi_secondary_radius_ip_addr":   gocql.TypeText,
			"wifi_secondary_radius_key":       gocql.TypeText,
			"wifi_secondary_radius_port":      gocql.TypeInt,
			"wifi_ssid":                       gocql.TypeText,
			"wifi_ssid_enable":                gocql.TypeBoolean,
			"wifi_status":                     gocql.TypeText,
			"wifi_uapsd_enable":               gocql.TypeBoolean,
			"wifi_wmm_enable":                 gocql.TypeBoolean,
			"wifi_wpa_algorithm":              gocql.TypeText,
			"wifi_wps_config_methods_enabled": gocql.TypeBoolean,
			"wifi_wps_configmethods_enabled":  gocql.TypeText,
			"wifi_wps_enable":                 gocql.TypeBoolean,
			"wmm_enabled":                     gocql.TypeBoolean,
		},
		"xfinity_wifi5g_secure_config": {
			"cpe_mac":                         gocql.TypeText,
			"wifi_ads_enable":                 gocql.TypeBoolean,
			"wifi_beacon_pwr_ctl":             gocql.TypeInt,
			"wifi_bssid":                      gocql.TypeText,
			"wifi_key_passphrase":             gocql.TypeText,
			"wifi_mode_enabled":               gocql.TypeText,
			"wifi_modes_supported":            gocql.TypeText,
			"wifi_name":                       gocql.TypeText,
			"wifi_radius_ip_addr":             gocql.TypeText,
			"wifi_radius_key":                 gocql.TypeText,
			"wifi_radius_port":                gocql.TypeInt,
			"wifi_secondary_radius_ip_addr":   gocql.TypeText,
			"wifi_secondary_radius_key":       gocql.TypeText,
			"wifi_secondary_radius_port":      gocql.TypeInt,
			"wifi_ssid":                       gocql.TypeText,
			"wifi_ssid_enable":                gocql.TypeBoolean,
			"wifi_status":                     gocql.TypeText,
			"wifi_uapsd_enable":               gocql.TypeBoolean,
			"wifi_wmm_enable":                 gocql.TypeBoolean,
			"wifi_wpa_algorithm":              gocql.TypeText,
			"wifi_wps_config_methods_enabled": gocql.TypeBoolean,
			"wifi_wps_configmethods_enabled":  gocql.TypeText,
			"wifi_wps_enable":                 gocql.TypeBoolean,
			"wmm_enabled":                     gocql.TypeBoolean,
		},
		"home_wifi_hotspot_config": {
			"cpe_mac":                       gocql.TypeText,
			"home_wifi_hotspot_capable_cpe": gocql.TypeBoolean,
			"home_wifi_hotspot_enabled":     gocql.TypeBoolean,
		},
		"xfinity_wifi_config": {
			"cpe_mac":                      gocql.TypeText,
			"wifi_ads_enable":              gocql.TypeBoolean,
			"wifi_ads_enable_5g":           gocql.TypeBoolean,
			"wifi_applysetting":            gocql.TypeBoolean,
			"wifi_applysetting_5g":         gocql.TypeBoolean,
			"wifi_beacon_pwr_ctl":          gocql.TypeInt,
			"wifi_beacon_pwr_ctl_5g":       gocql.TypeInt,
			"wifi_beacon_pwr_interval":     gocql.TypeInt,
			"wifi_beacon_pwr_rate":         gocql.TypeText,
			"wifi_bssid":                   gocql.TypeText,
			"wifi_bssid_5g":                gocql.TypeText,
			"wifi_enable":                  gocql.TypeBoolean,
			"wifi_enable_5g":               gocql.TypeBoolean,
			"wifi_radius_ip_addr_5g":       gocql.TypeText,
			"wifi_radius_key":              gocql.TypeText,
			"wifi_radius_key_5g":           gocql.TypeText,
			"wifi_radius_port_5g":          gocql.TypeInt,
			"wifi_secondary_radius_key":    gocql.TypeText,
			"wifi_secondary_radius_key_5g": gocql.TypeText,
			"wifi_ssid":                    gocql.TypeText,
			"wifi_ssid_5g":                 gocql.TypeText,
			"wifi_status":                  gocql.TypeText,
			"wifi_status_5g":               gocql.TypeText,
			"wmm_enabled_2g":               gocql.TypeBoolean,
			"wmm_enabled_5g":               gocql.TypeBoolean,
		},
		"cpe_xdns_policy": {
			"cpe_mac":      gocql.TypeText,
			"filter_level": gocql.TypeInt,
			"xdns_enabled": gocql.TypeBoolean,
		},
		"device_xdns_content_filtering": {
			"cpe_mac":      gocql.TypeText,
			"device_mac":   gocql.TypeText,
			"filter_level": gocql.TypeInt,
		},
		"fingerprint_agent": {
			"cpe_mac":          gocql.TypeText,
			"enabled":          gocql.TypeBoolean,
			"name":             gocql.TypeText,
			"updated_datetime": gocql.TypeTimestamp,
		},
		"cujo_security_agent": {
			"cpe_mac":            gocql.TypeText,
			"enabled":            gocql.TypeBoolean,
			"hard_limit_reached": gocql.TypeBoolean,
			"listen_mode":        gocql.TypeBoolean,
			"state":              gocql.TypeText,
			"update_time":        gocql.TypeTimestamp,
		},
		"mesh_agent": {
			"cpe_mac":                       gocql.TypeText,
			"disconnected":                  gocql.TypeBoolean,
			"enabled":                       gocql.TypeBoolean,
			"mesh_account_id":               gocql.TypeText,
			"optimization_sns_sent_time":    gocql.TypeTimestamp,
			"optimization_task_failed_time": gocql.TypeTimestamp,
			"optimization_time":             gocql.TypeTimestamp,
			"pods":                          gocql.TypeText,
		},
		"device_content_family_mentor_config": {
			"cpe_mac":          gocql.TypeText,
			"enabled":          gocql.TypeBoolean,
			"updated_datetime": gocql.TypeTimestamp,
		},
		"device_privacy_tracker": {
			"cpe_mac":          gocql.TypeText,
			"enabled":          gocql.TypeBoolean,
			"enabled_datetime": gocql.TypeTimestamp,
			"timezone":         gocql.TypeText,
			"updated_datetime": gocql.TypeTimestamp,
		},
		"cpe_devices_summary": {
			"cpe_mac":                     gocql.TypeText,
			"device_mac":                  gocql.TypeText,
			"device_parent":               gocql.TypeText,
			"device_type":                 gocql.TypeInt,
			"interface_type_spec":         gocql.TypeInt,
			"is_notification_attempted":   gocql.TypeBoolean,
			"last_seen_hostname":          gocql.TypeText,
			"last_seen_ip":                gocql.TypeText,
			"last_seen_offline_timestamp": gocql.TypeTimestamp,
			"last_seen_online_timestamp":  gocql.TypeTimestamp,
			"manufacturer":                gocql.TypeText,
			"status":                      gocql.TypeText,
		},
		"firmware_subdoc_bitmap": {
			"version": gocql.TypeText,
			"bitmap":  gocql.TypeBigInt,
		},
		"interworking_passpoint_config": {
			"cpe_mac":                         gocql.TypeText,
			"interworking_accessnetwork_type": gocql.TypeInt,
			"interworking_apply_settings":     gocql.TypeBoolean,
			"interworking_asra":               gocql.TypeBoolean,
			"interworking_esr":                gocql.TypeBoolean,
			"interworking_hessid":             gocql.TypeText,
			"interworking_hessoption_present": gocql.TypeBoolean,
			"interworking_internet":           gocql.TypeBoolean,
			"interworking_service_enable":     gocql.TypeBoolean,
			"interworking_service_parameters": gocql.TypeText,
			"interworking_uesa":               gocql.TypeBoolean,
			"interworking_venueginfo_group":   gocql.TypeInt,
			"interworking_venueinfo_group":    gocql.TypeInt,
			"interworking_venueinfo_type":     gocql.TypeInt,
			"passpoint_enable":                gocql.TypeBoolean,
			"passpoint_parameters":            gocql.TypeText,
			"wifi_interworking_enable":        gocql.TypeBoolean,
			"wifi_passpoint_enable":           gocql.TypeBoolean,
		},
		"wancos_config": {
			"cpe_mac":       gocql.TypeText,
			"cos_data":      gocql.TypeInt,
			"cos_voice_sip": gocql.TypeInt,
			"cos_voice_rtp": gocql.TypeInt,
		},
		"xfinity_bss_max_num_sta": {
			"cpe_mac":           gocql.TypeText,
			"bss_max_sta_10001": gocql.TypeInt,
			"bss_max_sta_10002": gocql.TypeInt,
			"bss_max_sta_10003": gocql.TypeInt,
			"bss_max_sta_10004": gocql.TypeInt,
			"bss_max_sta_10005": gocql.TypeInt,
			"bss_max_sta_10006": gocql.TypeInt,
			"bss_max_sta_10007": gocql.TypeInt,
			"bss_max_sta_10008": gocql.TypeInt,
			"bss_max_sta_10101": gocql.TypeInt,
			"bss_max_sta_10102": gocql.TypeInt,
			"bss_max_sta_10103": gocql.TypeInt,
			"bss_max_sta_10104": gocql.TypeInt,
			"bss_max_sta_10105": gocql.TypeInt,
			"bss_max_sta_10106": gocql.TypeInt,
			"bss_max_sta_10107": gocql.TypeInt,
			"bss_max_sta_10108": gocql.TypeInt,
		},
	}

	// these tables are excluded from the XpcFactoryResetTables
	// "radio_ssid_config", partitioned by (cpe_mac, radio_index)
	// "root_document", // to keep bitmap
	//"xpcconifg_table", partitioned by (cpe_mac, table_id)
	XpcFactoryResetTables = []string{
		"bridge_mode_config",
		"captive_portal_config",
		"firewall_config",
		"gre_tunnel_config",
		"hcpe_lan_config",
		"home_wifi_hotspot_config",
		"moca_config",
		"radio_config",
		"video_service_config",
		"wan_config",
		"xfinity_wifi2g_secure_config",
		"xfinity_wifi5g_secure_config",
		"xfinity_wifi_config",
		"xpc_group_config",
		"interworking_passpoint_config",
		"wancos_config",
		"xfinity_bss_max_num_sta",
	}

	OdpFactoryResetTables = []string{
		"cpe_xdns_policy",
		"cujo_security_agent",
		"device_content_family_mentor_config",
		"device_privacy_tracker",
		"device_xdns_content_filtering",
		"fingerprint_agent",
		"mesh_agent",
	}
)

func init() {
	tbExp := regexp.MustCompile(regexPattern)

	for _, x := range createTableStatements {
		match := tbExp.FindStringSubmatch(x)
		if len(match) > 1 {
			AllTables = append(AllTables, match[1])
		}
	}

	if len(createTableStatements) != len(AllTables) {
		//fmt.Println("WARNING 01: db.xpc_schema::init()")
		//fmt.Printf("len(createTableStatements)=%v\n", len(createTableStatements))
		//fmt.Printf("len(AllTables)=%v\n", len(AllTables))
	}
}
